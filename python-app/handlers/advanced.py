import asyncio

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile
from aiogram.types import ReplyKeyboardRemove

from components import database as db
from components import keyboards as kb
from components import s3
from modules import botStages

import logging
import random
import string
import re

PROMO_PATTERN = r'^[a-zA-Z–∞-—è–ê-–Ø0-9]+$'

MAX_PHOTOS = 1
state_lock = asyncio.Lock()


async def personal_account(message: types.Message):
    pool = await message.bot.get('pg_pool')
    personal_account_data = await db.personal_account(pool, message.from_user.id)
    await message.answer(
        f'{personal_account_data["fio"]}, —ç—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!\n\n'
        f'–ù–æ–º–µ—Ä–∞ –≤–∞—à–∏—Ö —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö –±–∏–ª–µ—Ç–∏–∫–æ–≤:\n'
        f'{personal_account_data["tickets"]}\n'
        f'–°–ª–µ–¥–∏ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ –≥—Ä—É–ø–ø–µ @yarkostorganic !'
    )


async def additional_play(message: types.Message):
    await message.answer(
        f'–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ø–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É!',
        reply_markup=kb.productKeyboard
    )
    await botStages.UserAdvancedScreenplay.advanced_product.set()


async def additional_product(message: types.Message,  state: FSMContext):
    async with state.proxy() as data:
        data['product'] = message.text
    await message.answer(
        f'–ü–æ–∫—É–ø–∞–ª–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –∏–ª–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç?',
        reply_markup=kb.purchaseLocationKeyboard
    )
    await botStages.UserAdvancedScreenplay.next()


async def additional_purchase_location(message: types.Message, state: FSMContext):
    purchase_location = message.text
    async with state.proxy() as data:
        data['purchase_location'] = purchase_location
    if purchase_location == '–ú–∞—Ä–∫–µ—Ç':
        await message.answer(
            f'–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–º–æ–∫–æ–¥ üíó\n'
            f'–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–æ —Å–ª–æ–≤–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!!',
            reply_markup=kb.cancelKeyboard
        )
        await botStages.UserAdvancedScreenplay.advanced_promo.set()
    elif purchase_location == '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å':
        await message.bot.send_photo(
            message.chat.id,
            photo=InputFile('photos/marketplaces.jpg'),
            caption=f'üìé–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —á–µ–∫ –æ–± –æ–±–ª–∞—Ç–µ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞, '
                    f'–≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å —Å–∫—Ä–µ–ø–∫–æ–π –æ–∫–æ–ª–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.',
            reply_markup=kb.cancelKeyboard
        )
        await botStages.UserAdvancedScreenplay.advanced_photo_upload.set()


async def additional_promo(message: types.Message, state: FSMContext):
    promo = message.text.strip()
    if re.match(PROMO_PATTERN, promo):
        pool = await message.bot.get('pg_pool')
        result = await db.check_user_promo(pool, promo)
        if result:
            async with state.proxy() as data:
                data['promo'] = promo
            await additional_lucky_ticket(message, state)
        else:
            await message.answer(
                f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥, –ª–∏–±–æ –æ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞üò≠\n'
                f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"',
                reply_markup=kb.cancelKeyboard
            )
    else:
        await message.answer(
            f'–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ ü§î\n'
            f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ - –æ–¥–Ω–æ —Å–ª–æ–≤–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤',
            reply_markup=kb.cancelKeyboard
        )


async def processing_document_when_uploading_photo(message: types.Message):
    await message.reply(
        f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∂–∞—Ç–æ–µ —Ñ–æ—Ç–æ (–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∏–ª–∏ –Ω–µ —É–±–∏—Ä–∞–π—Ç–µ –≥–∞–ª–æ—á–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ '
        f'"–°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ") üò∂',
        reply_markup=kb.cancelKeyboard
    )


async def additional_photo1(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: –≤—ã–∑—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á.
    """
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
    if not message.photo:
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return

    file_id = message.photo[-1].file_id

    async with state_lock:  # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ñ–æ—Ç–æ
        await add_photo_to_queue1(file_id, message, state)


async def add_photo_to_queue1(file_id: str, message: types.Message, state: FSMContext):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –≤ –æ—á–µ—Ä–µ–¥—å, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é.
    """
    async with state.proxy() as data:
        photos = data.get("photos1", [])  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        if len(photos) >= MAX_PHOTOS:
            logging.warning(f"–õ–∏–º–∏—Ç —Ñ–æ—Ç–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ: {file_id}")
            return

        logging.info(f"–î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ: {file_id}")
        photo_url = await save_photo_to_storage(file_id, message)
        photos.append(photo_url)
        data["photos1"] = photos  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ FSM

        current_state = await state.get_state()
        if len(photos) == MAX_PHOTOS and current_state == botStages.UserAdvancedScreenplay.advanced_photo_upload1.state:
            await message.answer("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤–∞—à–∞ –≤—Ç–æ—Ä–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            await finalize_photos1(message, state)


async def finalize_photos1(message: types.Message, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–≤—É—Ö —Ñ–æ—Ç–æ.
    """
    async with state.proxy() as data:
        await message.answer("üéâ –°–ø–∞—Å–∏–±–æ! –ü–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        logging.info(f"–§–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ: {data['photos1']}")
        await message.answer(
            f'üíñ –û—Å—Ç–∞–≤—å—Ç–µ —á–µ—Å—Ç–Ω—ã–π –æ—Ç–∑—ã–≤ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –æ—Ç YARKOST\n'
            f'–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç!!'
        )
        await botStages.UserAdvancedScreenplay.advanced_photo_upload2


async def additional_photo2(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: –≤—ã–∑—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á.
    """
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
    if not message.photo:
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return

    file_id = message.photo[-1].file_id

    async with state_lock:  # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ñ–æ—Ç–æ
        await add_photo_to_queue1(file_id, message, state)


async def add_photo_to_queue2(file_id: str, message: types.Message, state: FSMContext):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –≤ –æ—á–µ—Ä–µ–¥—å, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é.
    """
    async with state.proxy() as data:
        photos = data.get("photos2", [])  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        if len(photos) >= MAX_PHOTOS:
            logging.warning(f"–õ–∏–º–∏—Ç —Ñ–æ—Ç–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ: {file_id}")
            return

        logging.info(f"–î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ: {file_id}")
        photo_url = await save_photo_to_storage(file_id, message)
        photos.append(photo_url)
        data["photos2"] = photos  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ FSM

        current_state = await state.get_state()
        if len(photos) == MAX_PHOTOS and current_state == botStages.UserAdvancedScreenplay.advanced_photo_upload1.state:
            await message.answer("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤–∞—à–∞ –≤—Ç–æ—Ä–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            await finalize_photos1(message, state)


async def finalize_photos2(message: types.Message, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–≤—É—Ö —Ñ–æ—Ç–æ.
    """
    async with state.proxy() as data:
        await message.answer("üéâ –°–ø–∞—Å–∏–±–æ! –í—Ç–æ—Ä–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        logging.info(f"–§–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ: {data['photos2']}")
        await additional_lucky_ticket(message, state)


async def save_photo_to_storage(file_id: str, message: types.Message) -> str:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É.
    """
    random_string = ''.join(random.choices("abcdefghijklmnopqrstuvwxyz0123456789", k=10))
    filename = f"{random_string}_photo.jpg"
    photo_url = await s3.save_photo_to_minio(message.bot, file_id, filename, message.from_user.id)
    logging.info(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {photo_url}")
    return photo_url


async def additional_lucky_ticket(message: types.Message, state: FSMContext):
    pool = await message.bot.get('pg_pool')
    random_string = ''.join(random.choices(string.ascii_letters + string.digits, k=10))
    async with state.proxy() as data:
        data['lucky_ticket'] = random_string
    if data.get('promo'):
        await db.additional_with_promo(pool, state, message.from_user.id)
    else:
        await db.additional_with_photos(pool, state, message.from_user.id)
    await state.finish()
    await message.answer(
        f'–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É, —Å–µ–∫—É–Ω–¥–æ—á–∫—É...'
    )
    await message.answer(
        f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤–∞—à –æ—Ç–∑—ã–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n'
        f'–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –∫—É–ø–æ–Ω–∞: {random_string}'
    )
    await advanced_stage(message)


async def advanced_stage(message: types.Message):
    await botStages.UserAdvancedScreenplay.advanced.set()
    await message.bot.send_photo(
        message.chat.id,
        photo=InputFile('photos/marketplaces.jpg'),
        caption=(
            f'–ë–æ–ª—å—à–µ –ø–æ–∫—É–ø–æ–∫ - –±–æ–ª—å—à–µ —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑! –ü–æ–ª—É—á–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫—É–ø–æ–Ω –∑–∞ –Ω–æ–≤—É—é –ø–æ–∫—É–ø–∫—É:\n'
            f'1. –ü–æ–∫—É–ø–∞–π—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ YARKOST\n'
            f'2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –ø–æ–∫—É–ø–∫—É –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–∞ –∫–∞–∂–¥—É—é —Å—á–∞—Å—Ç–ª–∏–≤—ã–π –∫—É–ø–æ–Ω'),
        reply_markup=kb.marketsInline,
    )
    await message.answer(
        f'–ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –ø–æ–∫—É–ø–∫—É!',
        reply_markup=kb.lkKeyboard
    )


async def cancel_handler(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        f'–ü–æ–Ω—è–ª –≤–∞—Å! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é',
        reply_markup=ReplyKeyboardRemove()
    )
    await botStages.UserAdvancedScreenplay.advanced.set()
    await advanced_stage(message)


def register_advanced_handlers(dp: Dispatcher):
    dp.register_message_handler(cancel_handler,
                                state=botStages.UserAdvancedScreenplay.states,
                                content_types=types.ContentType.TEXT, text=['–û—Ç–º–µ–Ω–∞'])
    dp.register_message_handler(personal_account, state=botStages.UserAdvancedScreenplay.advanced,
                                content_types=types.ContentType.TEXT,
                                text=['–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'])
    dp.register_message_handler(additional_play, state=botStages.UserAdvancedScreenplay.advanced,
                                content_types=types.ContentType.TEXT,
                                text=['–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫—É–ø–æ–Ω'])
    dp.register_message_handler(additional_product, state=botStages.UserAdvancedScreenplay.advanced_product,
                                content_types=types.ContentType.TEXT)
    dp.register_message_handler(additional_purchase_location,
                                state=botStages.UserAdvancedScreenplay.advanced_purchase_location,
                                content_types=types.ContentType.TEXT)
    dp.register_message_handler(additional_promo, state=botStages.UserAdvancedScreenplay.advanced_promo,
                                content_types=types.ContentType.TEXT)
    dp.register_message_handler(processing_document_when_uploading_photo,
                                state=botStages.UserAdvancedScreenplay.advanced_photo_upload,
                                content_types=types.ContentType.DOCUMENT)
    dp.register_message_handler(additional_photo1, state=botStages.UserAdvancedScreenplay.advanced_photo_upload,
                                content_types=types.ContentType.PHOTO)
    dp.register_message_handler(additional_photo2, state=botStages.UserAdvancedScreenplay.advanced_photo_upload,
                                content_types=types.ContentType.PHOTO)
    dp.register_message_handler(advanced_stage, state=botStages.UserAdvancedScreenplay.advanced)