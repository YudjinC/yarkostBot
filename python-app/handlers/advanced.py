import asyncio

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile
from aiogram.types import ReplyKeyboardRemove

from components import database as db
from components import keyboards as kb
from components import s3
from modules import botStages

import logging
import random
import string

MAX_PHOTOS = 2
shared_data = {"photos": []}
state_lock = asyncio.Lock()


async def personal_account(message: types.Message):
    pool = await message.bot.get('pg_pool')
    personal_account_data = await db.personal_account(pool, message.from_user.id)
    await message.answer(
        f'{personal_account_data["fio"]}, —ç—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!\n\n'
        f'–ù–æ–º–µ—Ä–∞ –≤–∞—à–∏—Ö —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö –±–∏–ª–µ—Ç–∏–∫–æ–≤:\n'
        f'{personal_account_data["tickets"]}\n'
        f'–°–ª–µ–¥–∏ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ –≥—Ä—É–ø–ø–µ @yarkostorganic !'
    )


async def additional_play(message: types.Message):
    await message.answer(
        f'–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ø–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É!',
        reply_markup=kb.productKeyboard
    )
    await botStages.UserAdvancedScreenplay.advanced_product.set()


async def additional_product(message: types.Message,  state: FSMContext):
    async with state.proxy() as data:
        data['product'] = message.text
    await message.bot.send_photo(
        message.chat.id,
        photo=InputFile('photos/marketplaces.jpg'),
        caption=f'üíñ –û—Å—Ç–∞–≤—å—Ç–µ —á–µ—Å—Ç–Ω—ã–π –æ—Ç–∑—ã–≤ –æ —Å–ø—Ä–µ–π-–≥–∏–¥—Ä–æ–ª–∞—Ç –æ—Ç YARKOST\n'
                f'üìé–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∑–¥–µ—Å—å 2 —Å–∫—Ä–∏–Ω–∞:\n'
                f'—á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –∏ –æ—Ç–∑—ã–≤ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º —Ç–æ–≤–∞—Ä–∞, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å —Å–∫—Ä–µ–ø–∫–æ–π –æ–∫–æ–ª–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.',
        reply_markup=ReplyKeyboardRemove()
    )
    await botStages.UserAdvancedScreenplay.next()
    shared_data['photos'] = []


async def additional_photo(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: –≤—ã–∑—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á.
    """
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
    if not message.photo:
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return

    file_id = message.photo[-1].file_id

    async with state_lock:  # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ñ–æ—Ç–æ
        await add_photo_to_queue(file_id, message, state)


async def add_photo_to_queue(file_id: str, message: types.Message, state: FSMContext):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –≤ –æ—á–µ—Ä–µ–¥—å, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if len(shared_data['photos']) >= MAX_PHOTOS:
        logging.warning(f"–õ–∏–º–∏—Ç —Ñ–æ—Ç–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ: {file_id}")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    logging.info(f"–î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ: {file_id}")
    photo_url = await save_photo_to_storage(file_id, message)
    shared_data['photos'].append(photo_url)

    current_state = await state.get_state()
    if (len(shared_data['photos']) == 1) and (current_state == botStages.UserAdvancedScreenplay.advanced_photo):
        await message.answer("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –ø–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    elif (len(shared_data['photos']) == MAX_PHOTOS) and (current_state == botStages.UserAdvancedScreenplay.advanced_photo):
        await message.answer("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤–∞—à–∞ –≤—Ç–æ—Ä–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        await finalize_photos(message, state)


async def save_photo_to_storage(file_id: str, message: types.Message) -> str:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É.
    """
    random_string = ''.join(random.choices("abcdefghijklmnopqrstuvwxyz0123456789", k=6))
    filename = f"user_{message.from_user.id}_{random_string}_photo.jpg"
    photo_url = await s3.save_photo_to_minio(message.bot, file_id, filename)
    logging.info(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {photo_url}")
    return photo_url


async def finalize_photos(message: types.Message, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–≤—É—Ö —Ñ–æ—Ç–æ.
    """
    await message.answer("üéâ –°–ø–∞—Å–∏–±–æ! –û–±–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    logging.info(f"–§–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ: {shared_data['photos']}")
    await additional_lucky_ticket(message, state)


async def additional_lucky_ticket(message: types.Message, state: FSMContext):
    pool = await message.bot.get('pg_pool')
    random_string = ''.join(random.choices(string.ascii_letters + string.digits, k=10))
    async with state.proxy() as data:
        data['lucky_ticket'] = random_string
    await db.additional_item(pool, state, shared_data, message.from_user.id)
    await state.finish()
    await message.answer(
        f'–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É, —Å–µ–∫—É–Ω–¥–æ—á–∫—É...'
    )
    await message.answer(
        f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤–∞—à –æ—Ç–∑—ã–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n'
        f'–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –∫—É–ø–æ–Ω–∞: {random_string}'
    )
    await botStages.UserAdvancedScreenplay.advanced.set()
    await advanced_stage(message)


async def advanced_stage(message: types.Message):
    await botStages.UserAdvancedScreenplay.advanced.set()
    await message.bot.send_photo(
        message.chat.id,
        photo=InputFile('photos/marketplaces.jpg'),
        caption=(
            f'–ë–æ–ª—å—à–µ –ø–æ–∫—É–ø–æ–∫ - –±–æ–ª—å—à–µ —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑! –ü–æ–ª—É—á–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫—É–ø–æ–Ω –∑–∞ –Ω–æ–≤—É—é –ø–æ–∫—É–ø–∫—É:\n'
            f'1. –ü–æ–∫—É–ø–∞–π—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ YARKOST\n'
            f'2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –ø–æ–∫—É–ø–∫—É –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–∞ –∫–∞–∂–¥—É—é —Å—á–∞—Å—Ç–ª–∏–≤—ã–π –∫—É–ø–æ–Ω'),
        reply_markup=kb.marketsInline,
    )
    await message.answer(
        f'–ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –ø–æ–∫—É–ø–∫—É!',
        reply_markup=kb.lkKeyboard
    )


def register_advanced_handlers(dp: Dispatcher):
    dp.register_message_handler(personal_account, state=botStages.UserAdvancedScreenplay.advanced,
                                text=['–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'])
    dp.register_message_handler(additional_play, state=botStages.UserAdvancedScreenplay.advanced,
                                text=['–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫—É–ø–æ–Ω'])
    dp.register_message_handler(additional_product, state=botStages.UserAdvancedScreenplay.advanced_product)
    dp.register_message_handler(additional_photo, state=botStages.UserAdvancedScreenplay.advanced_photo,
                                content_types=types.ContentType.PHOTO)
    dp.register_message_handler(advanced_stage, state=botStages.UserAdvancedScreenplay.advanced)
