from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram.types import InputFile

from components import database as db
from components import keyboards as kb
from modules import botStages
from handlers.advanced import advanced_stage

import random
import string
import re

EMAIL_REGEX = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'


async def play(callback_query: types.CallbackQuery):
    if callback_query.data == 'play':
        await botStages.Screenplay.fio.set()
        await callback_query.bot.send_message(
            chat_id=callback_query.from_user.id,
            text=f'–ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?\n\n'
                 f'–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º‚¨á'
        )


async def add_nickname(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['fio'] = message.text
    await message.answer(
        f'–ö—É–¥–∞ –∑–≤–æ–Ω–∏—Ç—å, –∫–æ–≥–¥–∞ –≤—ã –æ–∫–∞–∂–µ—Ç–µ—Å—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–∑–∞?\n'
        f'–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π',
        reply_markup=kb.shareContactKeyboard
    )
    await botStages.Screenplay.next()


async def add_contact(message: types.Message, state: FSMContext):
    contact = message.contact
    async with state.proxy() as data:
        data['contact'] = contact.phone_number
    await message.answer(
        f'–ï—Å–ª–∏ –Ω–µ –¥–æ–∑–≤–æ–Ω–∏–º—Å—è, –Ω–∞ –∫–∞–∫–æ–π –∞–¥—Ä–µ—Å email –ø–∏—Å–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –ø–æ–±–µ–¥–æ–π –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ?',
        reply_markup=ReplyKeyboardRemove()
    )
    await botStages.Screenplay.next()


async def contact_not_shared(message: types.Message):
    await message.answer(
        f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"üòî',
        reply_markup=kb.shareContactKeyboard
    )


async def add_email(message: types.Message, state: FSMContext):
    email = message.text.strip()
    if re.match(EMAIL_REGEX, email):
        async with state.proxy() as data:
            data['email'] = email
        await message.answer(
            f'–ö–æ–≥–¥–∞ –≤–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è? –•–æ—Ç–∏–º —Ç–µ–ø–ª–æ –≤–∞—Å –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫!üíñ',
            reply_markup=ReplyKeyboardRemove()
        )
        await botStages.Screenplay.next()
    else:
        await message.answer(
            f'–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ emailü§î\n'
            f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, —É –≤–∞—Å –ø–æ–ª—É—á–∏—Ç—Å—è!!!'
        )


async def add_birthday(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['birthday'] = message.text
    await message.answer(
        f'–°—É–ø–µ—Ä!\n'
        f'–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É–ø–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É!',
        reply_markup=kb.productKeyboard
    )
    await botStages.Screenplay.next()


async def add_product(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['product'] = message.text
    await message.bot.send_photo(
        message.chat.id,
        photo=InputFile('photos/marketplaces.jpg'),
        caption=f'üíñ –û—Å—Ç–∞–≤—å—Ç–µ —á–µ—Å—Ç–Ω—ã–π –æ—Ç–∑—ã–≤ –æ —Å–ø—Ä–µ–π-–≥–∏–¥—Ä–æ–ª–∞—Ç –æ—Ç YARKOST\n'
                f'üìé–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∑–¥–µ—Å—å 2 —Å–∫—Ä–∏–Ω–∞:\n'
                f'—á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –∏ –æ—Ç–∑—ã–≤ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º —Ç–æ–≤–∞—Ä–∞, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å —Å–∫—Ä–µ–ø–∫–æ–π –æ–∫–æ–ª–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.',
        reply_markup=ReplyKeyboardRemove()
    )
    await botStages.Screenplay.next()


async def dont_added_photo(message: types.Message):
    await message.answer(
        f'–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...üòë'
    )


async def add_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    await botStages.Screenplay.next()
    await add_lucky_ticket(message, state)


async def add_lucky_ticket(message: types.Message, state: FSMContext):
    pool = await message.bot.get('pg_pool')
    await message.answer(
        f'–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É, —Å–µ–∫—É–Ω–¥–æ—á–∫—É...'
    )
    random_string = ''.join(random.choices(string.ascii_letters + string.digits, k=10))
    await message.answer(
        f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤–∞—à –æ—Ç–∑—ã–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n'
        f'–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –∫—É–ø–æ–Ω–∞: {random_string}'
    )
    async with state.proxy() as data:
        data['lucky_ticket'] = random_string
    await db.add_item(pool, state, message.from_user.id)
    await botStages.Screenplay.next()
    await advanced_stage(message)


def register_registration_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(play, lambda c: c.data == 'play')
    dp.register_message_handler(add_nickname, state=botStages.Screenplay.fio)
    dp.register_message_handler(add_contact, state=botStages.Screenplay.contact, content_types=types.ContentType.CONTACT)
    dp.register_message_handler(contact_not_shared, state=botStages.Screenplay.contact)
    dp.register_message_handler(add_email, state=botStages.Screenplay.email)
    dp.register_message_handler(add_birthday, state=botStages.Screenplay.birthday)
    dp.register_message_handler(add_product, state=botStages.Screenplay.product)
    dp.register_message_handler(dont_added_photo, lambda message: not message.photo, state=botStages.Screenplay.photo)
    dp.register_message_handler(add_photo, state=botStages.Screenplay.photo, content_types=['photo'])
    dp.register_message_handler(add_lucky_ticket, state=botStages.Screenplay.lucky_ticket)
