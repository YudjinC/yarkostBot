import asyncio

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram.types import InputFile

from components import database as db
from components import keyboards as kb
from components import s3
from modules import botStages
from handlers.advanced import advanced_stage
import logging
import random
import string
import re

EMAIL_REGEX = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'

MAX_PHOTOS = 2
shared_data = {"photos": []}
state_lock = asyncio.Lock()


async def play(callback_query: types.CallbackQuery):
    if callback_query.data == 'play':
        await botStages.UserRegistrationScreenplay.fio.set()
        await callback_query.bot.send_message(
            chat_id=callback_query.from_user.id,
            text=f'–ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?\n\n'
                 f'–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º‚¨á'
        )


async def add_nickname(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['fio'] = message.text
    await message.answer(
        f'–ö—É–¥–∞ –∑–≤–æ–Ω–∏—Ç—å, –∫–æ–≥–¥–∞ –≤—ã –æ–∫–∞–∂–µ—Ç–µ—Å—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–∑–∞?\n'
        f'–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π',
        reply_markup=kb.shareContactKeyboard
    )
    await botStages.UserRegistrationScreenplay.next()


async def add_contact(message: types.Message, state: FSMContext):
    contact = message.contact
    async with state.proxy() as data:
        data['contact'] = contact.phone_number
    await message.answer(
        f'–ï—Å–ª–∏ –Ω–µ –¥–æ–∑–≤–æ–Ω–∏–º—Å—è, –Ω–∞ –∫–∞–∫–æ–π –∞–¥—Ä–µ—Å email –ø–∏—Å–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –ø–æ–±–µ–¥–æ–π –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ?',
        reply_markup=ReplyKeyboardRemove()
    )
    await botStages.UserRegistrationScreenplay.next()


async def contact_not_shared(message: types.Message):
    await message.answer(
        f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"üòî',
        reply_markup=kb.shareContactKeyboard
    )


async def add_email(message: types.Message, state: FSMContext):
    email = message.text.strip()
    if re.match(EMAIL_REGEX, email):
        async with state.proxy() as data:
            data['email'] = email
        await message.answer(
            f'–ö–æ–≥–¥–∞ –≤–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è? –•–æ—Ç–∏–º —Ç–µ–ø–ª–æ –≤–∞—Å –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫!üíñ',
            reply_markup=ReplyKeyboardRemove()
        )
        await botStages.UserRegistrationScreenplay.next()
    else:
        await message.answer(
            f'–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ emailü§î\n'
            f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, —É –≤–∞—Å –ø–æ–ª—É—á–∏—Ç—Å—è!!!'
        )


async def add_birthday(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['birthday'] = message.text
    await message.answer(
        f'–°—É–ø–µ—Ä!\n'
        f'–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É–ø–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É!',
        reply_markup=kb.productKeyboard
    )
    await botStages.UserRegistrationScreenplay.next()


async def add_product(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['product'] = message.text
    await message.bot.send_photo(
        message.chat.id,
        photo=InputFile('photos/marketplaces.jpg'),
        caption=f'üíñ –û—Å—Ç–∞–≤—å—Ç–µ —á–µ—Å—Ç–Ω—ã–π –æ—Ç–∑—ã–≤ –æ —Å–ø—Ä–µ–π-–≥–∏–¥—Ä–æ–ª–∞—Ç –æ—Ç YARKOST\n'
                f'üìé–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∑–¥–µ—Å—å 2 —Å–∫—Ä–∏–Ω–∞:\n'
                f'—á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –∏ –æ—Ç–∑—ã–≤ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º —Ç–æ–≤–∞—Ä–∞, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å —Å–∫—Ä–µ–ø–∫–æ–π –æ–∫–æ–ª–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.',
        reply_markup=ReplyKeyboardRemove()
    )
    await botStages.UserRegistrationScreenplay.next()


async def add_photos(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: –≤—ã–∑—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á.
    """
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
    if not message.photo:
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return

    file_id = message.photo[-1].file_id

    async with state_lock:  # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ñ–æ—Ç–æ
        await add_photo_to_queue(file_id, message, state)


async def add_photo_to_queue(file_id: str, message: types.Message, state: FSMContext):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –≤ –æ—á–µ—Ä–µ–¥—å, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if len(shared_data['photos']) >= MAX_PHOTOS:
        logging.warning(f"–õ–∏–º–∏—Ç —Ñ–æ—Ç–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ: {file_id}")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    logging.info(f"–î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ: {file_id}")
    photo_url = await save_photo_to_storage(file_id, message)
    shared_data['photos'].append(photo_url)

    if len(shared_data['photos']) == 1:
        await message.answer("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤–∞—à **—á–µ–∫** —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    elif len(shared_data['photos']) == MAX_PHOTOS:
        await message.answer("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤–∞—à **–æ—Ç–∑—ã–≤** —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        await finalize_photos(message, state)


async def save_photo_to_storage(file_id: str, message: types.Message) -> str:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É.
    """
    random_string = ''.join(random.choices("abcdefghijklmnopqrstuvwxyz0123456789", k=6))
    filename = f"user_{message.from_user.id}_{random_string}_photo.jpg"
    photo_url = await s3.save_photo_to_minio(message.bot, file_id, filename)
    logging.info(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {photo_url}")
    return photo_url


async def finalize_photos(message: types.Message, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–≤—É—Ö —Ñ–æ—Ç–æ.
    """
    await message.answer("üéâ –°–ø–∞—Å–∏–±–æ! –û–±–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    logging.info(f"–§–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ: {shared_data['photos']}")
    await add_lucky_ticket(message, state)


async def add_lucky_ticket(message: types.Message, state: FSMContext):
    pool = await message.bot.get('pg_pool')
    await message.answer(
        f'–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É, —Å–µ–∫—É–Ω–¥–æ—á–∫—É...'
    )
    random_string = ''.join(random.choices(string.ascii_letters + string.digits, k=10))
    await message.answer(
        f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤–∞—à –æ—Ç–∑—ã–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n'
        f'–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –∫—É–ø–æ–Ω–∞: {random_string}'
    )
    async with state.proxy() as data:
        data['lucky_ticket'] = random_string
    await db.add_item(pool, state, shared_data, message.from_user.id)
    await botStages.UserAdvancedScreenplay.advanced.set()
    await advanced_stage(message)


def register_registration_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(play, lambda c: c.data == 'play')
    dp.register_message_handler(add_nickname, state=botStages.UserRegistrationScreenplay.fio)
    dp.register_message_handler(add_contact, state=botStages.UserRegistrationScreenplay.contact,
                                content_types=types.ContentType.CONTACT)
    dp.register_message_handler(contact_not_shared, state=botStages.UserRegistrationScreenplay.contact)
    dp.register_message_handler(add_email, state=botStages.UserRegistrationScreenplay.email)
    dp.register_message_handler(add_birthday, state=botStages.UserRegistrationScreenplay.birthday)
    dp.register_message_handler(add_product, state=botStages.UserRegistrationScreenplay.product)
    dp.register_message_handler(add_photos, state=botStages.UserRegistrationScreenplay.photo_upload,
                                content_types=types.ContentType.PHOTO)
